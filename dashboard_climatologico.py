import streamlit as st
import pandas as pd
import plotly.express as px
import pickle

# Configuraci칩n de la p치gina
st.set_page_config(page_title="Dashboard Climatol칩gico", layout="wide", page_icon="游깴")

# Carga del DataFrame
df = pd.read_csv("base_actualizada.csv")
df['Temperatura'] = df['Temperatura'].round(3)
df['Precipitaciones'] = df['Precipitaciones'].round(3)

# Eliminar registros con valores nulos en latitud o longitud
df = df.dropna(subset=['Latitud', 'Longitud'])

# Cargar modelos entrenados
with open('modelo_logistico_lluvia.pkl', 'rb') as file:
    modelo_lluvia = pickle.load(file)
with open('scaler_lluvia.pkl', 'rb') as file:
    scaler_lluvia = pickle.load(file)

with open('modelo_logistico_temperatura.pkl', 'rb') as file:
    modelo_temp = pickle.load(file)
with open('scaler_temp.pkl', 'rb') as file:
    scaler_temp = pickle.load(file)

# Sidebar (Men칰 Lateral)
st.sidebar.title("Men칰")
opcion = st.sidebar.radio("Selecciona una vista:", ["Principal", "Mapa Interactivo", "B칰squeda por Pa칤s", "Probabilidades"])

# Vista Principal
if opcion == "Principal":
    st.title("Dashboard climatol칩gico")
     # Contexto del Proyecto
    st.write("""
    **Bienvenido**  
    Este proyecto tiene como objetivo analizar y predecir patrones clim치ticos basados en datos hist칩ricos, 
    ayudando a comprender la variabilidad clim치tica a nivel mundial. Aqu칤 encontrar치s informaci칩n sobre:  
    - Los pa칤ses con mayor y menor precipitaciones y temperaturas.
    - Mapas interactivos para explorar datos geogr치ficos.
    - Predicciones de eventos extremos como temperaturas altas y lluvias abundantes.  
    Esta herramienta puede ser 칰til para investigadores, agricultores y responsables de la toma de decisiones 
    en torno a los efectos del cambio clim치tico.
    """)

    # M칠tricas clave
    st.subheader("M칠tricas Resumidas")
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("M치x. Precipitaciones", f"{df['Precipitaciones'].max()} mm", df.loc[df['Precipitaciones'].idxmax(), 'Pa칤s'])
    col2.metric("M칤n. Temperatura", f"{df['Temperatura'].min()} 춿C", df.loc[df['Temperatura'].idxmin(), 'Pa칤s'])
    col3.metric("M칤n. Precipitaciones", f"{df['Precipitaciones'].min()} mm", df.loc[df['Precipitaciones'].idxmin(), 'Pa칤s'])
    col4.metric("M치x. Temperatura", f"{df['Temperatura'].max()} 춿C", df.loc[df['Temperatura'].idxmax(), 'Pa칤s'])
    col5.metric("Total de Pa칤ses", f"{len(df['Pa칤s'].unique())}")

    # Gr치ficos Comparativos
    st.subheader("Gr치ficos Comparativos")
    col1, col2 = st.columns(2)

    # Gr치fico 1: Top 10 pa칤ses con m치s precipitaciones
    with col1:
        fig1 = px.bar(
            df.sort_values('Precipitaciones', ascending=False).head(10),
            x='Pa칤s',
            y='Precipitaciones',
            title="Top 10 Pa칤ses con M치s Precipitaciones",
            color='Pa칤s',
            color_discrete_sequence=px.colors.sequential.Cividis_r
        )
        st.plotly_chart(fig1, use_container_width=True)

    # Gr치fico 2: Top 10 pa칤ses con menos precipitaciones
    with col2:
        fig2 = px.bar(
            df.sort_values('Precipitaciones').head(10),
            x='Pa칤s',
            y='Precipitaciones',
            title="Top 10 Pa칤ses con Menos Precipitaciones",
            color='Pa칤s',
            color_discrete_sequence=px.colors.sequential.Viridis_r
        )
        st.plotly_chart(fig2, use_container_width=True)

    col3, col4 = st.columns(2)

    # Gr치fico 3: Top 10 pa칤ses con mayores temperaturas
    with col3:
        fig3 = px.bar(
            df.sort_values('Temperatura', ascending=False).head(10),
            x='Pa칤s',
            y='Temperatura',
            title="Top 10 Pa칤ses con Mayor Temperatura",
            color='Pa칤s',
            color_discrete_sequence=px.colors.sequential.Magma_r
        )
        st.plotly_chart(fig3, use_container_width=True)

    # Gr치fico 4: Top 10 pa칤ses con menores temperaturas
    with col4:
        fig4 = px.bar(
            df.sort_values('Temperatura').head(10),
            x='Pa칤s',
            y='Temperatura',
            title="Top 10 Pa칤ses con Menor Temperatura",
            color='Pa칤s',
            color_discrete_sequence=px.colors.sequential.ice_r
        )
        st.plotly_chart(fig4, use_container_width=True)

# Mapa Interactivo
elif opcion == "Mapa Interactivo":
    st.title("Mapa Interactivo")
    st.write("""
    Explora patrones clim치ticos alrededor del mundo con este mapa interactivo.
    Utiliza los filtros disponibles para visualizar datos espec칤ficos seg칰n el mes y la variable seleccionada, ya sea precipitaciones o temperaturas.
    """)
    filtro_variable = st.selectbox("Selecciona una variable", ["Precipitaciones", "Temperatura"])
    filtro_mes = st.selectbox("Selecciona el mes", df['Mes'].unique())
    df_filtrado = df[df['Mes'] == filtro_mes]

    if not df_filtrado.empty:
        fig_mapa = px.scatter_mapbox(
            df_filtrado,
            lat="Latitud",
            lon="Longitud",
            hover_name="Pa칤s",
            color=filtro_variable,
            size=filtro_variable,
            zoom=1,
            mapbox_style="carto-positron"
        )
        st.plotly_chart(fig_mapa, use_container_width=True)
    else:
        st.warning(f"No hay datos disponibles para {filtro_mes}. Verifica el archivo.")

# B칰squeda por Pa칤s
# C칩digo dentro de la secci칩n de b칰squeda por pa칤s
if opcion == "B칰squeda por Pa칤s":
    st.title("B칰squeda por Pa칤s")
    st.write("""
    Selecciona un pa칤s para visualizar su informaci칩n clim치tica espec칤fica, incluyendo temperaturas m치ximas, m칤nimas, precipitaciones y su ubicaci칩n en el mapa.
    """)

    # Desplegable para seleccionar el pa칤s
    pais_seleccionado = st.selectbox("Selecciona un pa칤s", df['Pa칤s'].unique())

    # Filtrar los datos por el pa칤s seleccionado
    datos_pais = df[df['Pa칤s'] == pais_seleccionado]

    if not datos_pais.empty:
        # Mostrar las m칠tricas clave del pa칤s seleccionado
        col1, col2 = st.columns(2)
        col1.metric("M치x. Precipitaciones", f"{datos_pais['Precipitaciones'].max()} mm")
        col1.metric("M칤n. Precipitaciones", f"{datos_pais['Precipitaciones'].min()} mm")
        col2.metric("M치x. Temperatura", f"{datos_pais['Temperatura'].max()} 춿C")
        col2.metric("M칤n. Temperatura", f"{datos_pais['Temperatura'].min()} 춿C")

        # Mostrar el mapa interactivo con el pa칤s seleccionado
        st.subheader("Ubicaci칩n en el Mapa")
        fig_mapa = px.scatter_mapbox(
            datos_pais,
            lat="Latitud",
            lon="Longitud",
            hover_name="Pa칤s",
            zoom=4,
            mapbox_style="carto-positron",  # Estilo claro
            title=f"Ubicaci칩n de {pais_seleccionado}",
        )
        # Personalizar el tama침o y color del marcador
        fig_mapa.update_traces(marker=dict(size=15, color='green'))
        fig_mapa.update_layout(title_font_size=18, margin=dict(t=50, b=0))

        st.plotly_chart(fig_mapa, use_container_width=True)
    else:
        st.warning(f"No se encontraron datos para {pais_seleccionado}.")

# Probabilidades
elif opcion == "Probabilidades":
    st.title("Probabilidades de Eventos Clim치ticos")
    st.write("""
    Selecciona un pa칤s y un mes para calcular la probabilidad de enfrentar temperaturas extremas o lluvias abundantes.
    """)
    pais = st.selectbox("Selecciona un pa칤s", df['Pa칤s'].unique())
    mes = st.selectbox("Selecciona un mes", df['Mes'].unique())
    datos = df[(df['Pa칤s'] == pais) & (df['Mes'] == mes)]

    if not datos.empty:
        # Preparar datos para predicci칩n
        prec = datos['Precipitaciones'].mean()
        temp = datos['Temperatura'].mean()
        prob_lluvia = modelo_lluvia.predict_proba(scaler_lluvia.transform([[prec]]))[0][1]
        prob_temp = modelo_temp.predict_proba(scaler_temp.transform([[temp]]))[0][1]

        col1, col2 = st.columns(2)
        col1.metric("Probabilidad de Lluvias Abundantes", f"{prob_lluvia * 100:.2f}%")
        col2.metric("Probabilidad de Temperaturas Altas", f"{prob_temp * 100:.2f}%")
    else:
        st.warning(f"No hay datos disponibles para {pais} en {mes}.")
